[AI]
public class Evade : MonoBehaviour
{
    public Transform player;
    public float safeDistance = 10f;
    public float speed = 5f;

    void Update()
    {
        Vector3 playerDirection = player.position - transform.position;
        if (playerDirection.magnitude < safeDistance)
        {
            Vector3 randomDirection = (Random.insideUnitSphere * safeDistance).normalized;
            Vector3 evadeDirection = transform.position + randomDirection;
            Vector3 direction = (evadeDirection - transform.position).normalized;
            transform.position += direction * speed * Time.deltaTime;
        }
    }
}

[AI]
public class Hide : MonoBehaviour
{
    public Transform player;
    public float speed = 5f;
    public LayerMask obstaclesLayer;

    void Update()
    {
        Vector3 hideSpot = FindBestHideSpot();
        if (hideSpot != Vector3.zero)
        {
            Vector3 direction = (hideSpot - transform.position).normalized;
            transform.position += direction * speed * Time.deltaTime;
        }
    }

    Vector3 FindBestHideSpot()
    {
        Collider[] obstacles = Physics.OverlapSphere(transform.position, 20f, obstaclesLayer);
        Vector3 bestSpot = Vector3.zero;
        float bestDistance = Mathf.Infinity;

        foreach (var obstacle in obstacles)
        {
            Vector3 hideDirection = (obstacle.transform.position - player.position).normalized;
            Vector3 potentialSpot = obstacle.transform.position + hideDirection * obstacle.bounds.extents.magnitude;

            float distanceToSpot = Vector3.Distance(transform.position, potentialSpot);
            if (distanceToSpot < bestDistance)
            {
                bestDistance = distanceToSpot;
                bestSpot = potentialSpot;
            }
        }

        return bestSpot;
    }
}

[AI]
public class Pursuit : MonoBehaviour
{
    public Transform player;
    public float speed = 5f;

    void Update()
    {
        Vector3 playerDirection = player.position - transform.position;
        float distance = playerDirection.magnitude;
        float playerSpeed = player.GetComponent<Rigidbody>().velocity.magnitude;
        float predictionTime = distance / speed;

        Vector3 predictedPosition = player.position + player.forward * playerSpeed * predictionTime;
        Vector3 direction = (predictedPosition - transform.position).normalized;
        transform.position += direction * speed * Time.deltaTime;
    }
}

[AI]

public class Seek : MonoBehaviour
{
    public Transform player;
    public float speed = 5f;

    void Update()
    {
        Vector3 playerDirection = player.position - transform.position;
        Vector3 predictedPosition = player.position + player.forward * playerDirection.magnitude / speed;
        Vector3 direction = (predictedPosition - transform.position).normalized;
        transform.position += direction * speed * Time.deltaTime;
    }
}

[AI]

public class SeekAndFlee : MonoBehaviour
{
    public Transform player;
    public float seekDistance = 10f;
    public float fleeDistance = 5f;
    public float speed = 5f;

    void Update()
    {
        Vector3 playerDirection = player.position - transform.position;
        if (playerDirection.magnitude < seekDistance)
        {
            Vector3 direction = playerDirection.normalized;
            transform.position += direction * speed * Time.deltaTime;
        }
        else if (playerDirection.magnitude < fleeDistance)
        {
            Vector3 direction = -playerDirection.normalized;
            transform.position += direction * speed * Time.deltaTime;
        }
    }
}
