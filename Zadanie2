public class AIShell : MonoBehaviour
{

    public GameObject explosion;
    Rigidbody rb;

    void OnCollisionEnter(Collision col) {

        if (col.gameObject.tag == "tank") {
            Debug.Log("Hit tank");
            GameObject exp = Instantiate(explosion, this.transform.position, Quaternion.identity);
            Destroy(exp, 0.5f);
            Destroy(this.gameObject);
        }
    }

    void Start() {

        rb = GetComponent<Rigidbody>();
    }

    void Update() {


        this.transform.forward = rb.velocity;
    }
}


public class DestroyShell : MonoBehaviour
{
    
    void Start()
    {
        Destroy(this.gameObject, 3);  
    }

}


public class Drive : MonoBehaviour 
{
    public float speed = 10.0f;
    public float rotationSpeed = 100.0f;
    public Transform transGun;
    public Transform gun;
    public GameObject bulletObj;

    void Update() 
    {
    
        float translation = Input.GetAxis("Vertical") * speed;
        float rotation = Input.GetAxis("Horizontal") * rotationSpeed;


        translation *= Time.deltaTime;
        rotation *= Time.deltaTime;

 
        transform.Translate(0, 0, translation);
   
        transform.Rotate(0, rotation, 0);

        if (Input.GetKey(KeyCode.T)) {

            transGun.RotateAround(transGun.position, transGun.right, -2.0f);
        } else if (Input.GetKey(KeyCode.G)) {

            transGun.RotateAround(transGun.position, transGun.right, 2.0f);
        } else if (Input.GetKeyDown(KeyCode.B)) {

            Instantiate(bulletObj, gun.position, gun.rotation);
        }
    }
}

public class FireShell : MonoBehaviour {

    public GameObject bullet;
    public GameObject turret;
    public GameObject enemy;
    public Transform turretBase;

    private float speed = 15.0f;
    private float rotSpeed = 5.0f;
    private float moveSpeed = 1.0f;

    static float delayReset = 0.2f;
    float delay = delayReset;

    void CreateBullet() {

        GameObject shell = Instantiate(bullet, turret.transform.position, turret.transform.rotation);
        shell.GetComponent<Rigidbody>().velocity = speed * turretBase.forward;
    }

    float? RotateTurret() {

        float? angle = CalculateAngle(false);

        if (angle != null) {

            turretBase.localEulerAngles = new Vector3(360.0f - (float)angle, 0.0f, 0.0f);
        }
        return angle;
    }

    float? CalculateAngle(bool low) {

        Vector3 targetDir = enemy.transform.position - this.transform.position;
        float y = targetDir.y;
        targetDir.y = 0.0f;
        float x = targetDir.magnitude - 1.0f;
        float gravity = 9.8f;
        float sSqr = speed * speed;
        float underTheSqrRoot = (sSqr * sSqr) - gravity * (gravity * x * x + 2 * y * sSqr);

        if (underTheSqrRoot >= 0.0f) {

            float root = Mathf.Sqrt(underTheSqrRoot);
            float highAngle = sSqr + root;
            float lowAngle = sSqr - root;

            if (low) return (Mathf.Atan2(lowAngle, gravity * x) * Mathf.Rad2Deg);
            else return (Mathf.Atan2(highAngle, gravity * x) * Mathf.Rad2Deg);
        } else
            return null;
    }

    void Update() {

        delay -= Time.deltaTime;
        Vector3 direction = (enemy.transform.position - this.transform.position).normalized;
        Quaternion lookRotation = Quaternion.LookRotation(new Vector3(direction.x, 0.0f, direction.z));
        this.transform.rotation = Quaternion.Slerp(this.transform.rotation, lookRotation, Time.deltaTime * rotSpeed);
        float? angle = RotateTurret();

        if (angle != null && delay <= 0.0f) {

            CreateBullet();
            delay = delayReset;
        } else {

            this.transform.Translate(0.0f, 0.0f, Time.deltaTime * moveSpeed);
        }
    }
}

public class MoveShell : MonoBehaviour 
{

    public float speed = 1.0f;


    void Update() {

        transform.Translate(0.0f, 0.0f, Time.deltaTime * speed);
    }
}

public class Shell : MonoBehaviour {

    public GameObject explosion;
    float speed = 0.0f;
    float ySpeed = 0.0f;
    float mass = 30.0f;
    float force = 4.0f;
    float drag = 1.0f;
    float gravity = -9.8f;
    float gAccel;
    float acceleration;


    void OnCollisionEnter(Collision col) {

        if (col.gameObject.tag == "tank") {
            GameObject exp = Instantiate(explosion, this.transform.position, Quaternion.identity);
            Destroy(exp, 0.5f);
            Destroy(this.gameObject);
        }
    }

    private void Start() {

        acceleration = force / mass;
        speed += acceleration * 1.0f;
        gAccel = gravity / mass;
    }

    void LateUpdate() {

        speed *= (1 - Time.deltaTime * drag);
        ySpeed += gAccel * Time.deltaTime;
        this.transform.Translate(0.0f, ySpeed, speed);
    }
}


